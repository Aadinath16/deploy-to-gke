name: Release Workflow

on:
  push:
    branches:
      - main
      - dev
      - branch-1

env:
  IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  REPO_NAME: ${{ secrets.DOCKER_REPO_NAME }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    outputs:
      release_tag: ${{ steps.get_tag.outputs.release_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run semantic release
        env:
          GH_TOKEN: ${{ secrets.ACTION }}
        run: npx semantic-release

      - name: Fetch tags created via API
        run: git fetch --tags  # <--- This is critical

      - name: Extract created tag
        id: get_tag
        run: |
          TAG=$(git describe --tags --abbrev=0)
          echo "release_tag=$TAG"
          echo "release_tag=$TAG" >> "$GITHUB_OUTPUT"

      # - name: Extract created tag
      #   id: get_tag
      #   run: |
      #     TAG=$(git describe --tags --abbrev=0)
      #     echo "release_tag=$TAG" >> "$GITHUB_OUTPUT"

  release-and-build:
    name: Semantic Release & Docker Build
    runs-on: ubuntu-latest
    needs: release
    steps:
        - name: Checkout code
          uses: actions/checkout@v3
          with:
            fetch-depth: 0

        - name: Set release tag
          run: echo "RELEASE_TAG=${{ needs.release.outputs.release_tag }}" >> $GITHUB_ENV

        - name: Debug tag
          run: |
            echo "RELEASE_TAG: ${RELEASE_TAG}"


        - name: Build and Push Docker Image
          run: |
                echo "RELEASE_TAG: ${RELEASE_TAG}"
                IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${RELEASE_TAG}"
                echo ${IMAGE}

        - name: Clean up Docker Buildx
          run: docker buildx prune -f